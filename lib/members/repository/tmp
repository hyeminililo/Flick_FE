Future<void> fetchMemberInfo() async {
  final token = await storage.read(key: 'ACCESS_TOKEN_KEY');

  if (token == null) {
    print("[Error]: Token is null");
    return;
  }

  try {
    final response = await membersRepository.fetchMemberInfo(
        authorization: 'Bearer $token');
    print('MemberInfo Status Code: ${response.statusCode}');

    if (response.statusCode == 200) {
      // ApiResponse<MemberInfoModel> 타입에 맞게 data 접근
      memberInfo = response.data.data; // ApiResponse의 data 필드 접근
      print('Fetched MemberInfo: $memberInfo');
    } else {
      print('[Warning]: Unexpected status code ${response.statusCode}');
    }
  } on DioError catch (dioError) {
    if (dioError.type == DioErrorType.response) {
      print('[ERR]: 서버 응답 오류: ${dioError.response?.statusCode}');
    } else if (dioError.type == DioErrorType.connectTimeout ||
               dioError.type == DioErrorType.receiveTimeout) {
      print('[ERR]: 요청이 타임아웃되었습니다.');
    } else {
      print('[ERR]: 알 수 없는 오류가 발생했습니다: ${dioError.message}');
    }
  } catch (e) {
    print('[ERR]: 멤버 정보를 가져오는 과정에서 오류가 발생했습니다: $e');
  }
}
